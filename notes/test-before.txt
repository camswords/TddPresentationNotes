

time to working software (feedback): fastish

fear of change: low
    lots of tests

on finding an error, size of search space: low
    poked holes become much larger    

ease of testing: easy
    write code to suit test
    end up with lots more tests
    tests become examples of how to use a class (understanding++)
    
mocking and stubbing is used to substitute implementations
    reduces dependency on the real implementation
    leads to more flexible class design

test by example

ping-pong fun and games

fundamental change in the way that we think
    thinking happens in the test
    not everyone makes this jump
    massive mental shift